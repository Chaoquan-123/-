C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ZHONGJIBAN
OBJECT MODULE PLACED IN .\Objects\zhongjiban.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE zhongjiban.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\头文件) DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\zhongjiban.lst) TABS(2) OBJECT(.\Objects\zhongjiban.obj)

line level    source

   1          #include "STC15Fxxxx.H"
   2          #include "intrins.h"
   3          #include <stdio.h>
   4          #include "ADC.h"
   5          #include "delay.h"
   6          #define uint unsigned int
   7          #define uchar unsigned char
   8          #define ulong unsigned long
   9            sbit col_1=P3^4;
  10            sbit col_2=P3^5;
  11            sbit col_3=P3^6;
  12            sbit col_4=P3^7;  //矩阵键盘地址分配
  13            ////////////////
  14           sbit lcdrs=P0^7;
  15           sbit lcdrw=P0^6;
  16           sbit lcde=P0^5;    //液晶显示地址分配
  17           sbit led_green=P0^1;
  18           sbit feng=P0^1;
  19           sbit PWM=P0^4;
  20          uint time=0;
  21          struct 
  22          {
  23              float set_angle;//设定速度 
  24              float actual_angle;//实际速度
  25              float error;//偏差  
  26              float error_next;//上一个偏差  
  27              float error_last;//上上一个偏差 
  28            float error_add; 
  29              float kp,ki,kd;//定义比例，积分，微分参数  
  30              float umax,umin; 
  31          }pid;
  32           ////////////////
  33           sfr ADC_LOW2=0xBE;   //ADC low 2-bit result register;
  34          #define ADC_POWER   0x80            //ADC电源控制位
  35          #define ADC_FLAG    0x10            //ADC完成标志
  36          #define ADC_START   0x08            //ADC起始控制位
  37          #define ADC_SPEEDLL 0x00            //540个时钟
  38          #define ADC_SPEEDL  0x20            //360个时钟
  39          #define ADC_SPEEDH  0x40            //180个时钟
  40          #define ADC_SPEEDHH 0x60            //90个时钟
  41          #define uchar unsigned char 
  42          #define  uint unsigned int
  43          
  44          uint num=0;
  45          uint count=0;
  46          uchar pwm_count=0;
  47          uchar num_py;
  48          uchar py_count=0;
  49          uint pwm_count1; 
  50          bit z_bit1,z_bit2;z_bit3;
  51          bit py_bit; 
  52          bit pz_bit;
  53          uint ad_ture=0; 
  54          uchar keynum,flag=0;
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 2   

  55          uchar num1,num2,flag1,flag2,flag3,flag4;
  56          uint jiao=0; 
  57          uchar set_jiao=0;
  58          uint t0_count=0;
  59          bit display_bit=1,flag_bit=0,set_jiao_bit=1; 
  60          uchar s1[3]={0x01,0x22,0x00}; 
  61          
  62          uint s2[2]={0,0}; 
  63          uint s3[5]={0,0,0,0,0}; 
  64          uint kk=0; 
  65          uint a,c;
  66          char increment_angle;
  67          char middle_value;
  68          //////////////////
  69          void InitADC(); //AD转换初始化
  70          uchar GetADCResult(uchar ch);    //获取转换初值
  71          uint  get_adc(uchar ch);
  72          void keyscan(void);
  73          void keyfind(unsigned char);
  74          void keyprocess(void);
  75          void delay_ad(uint t); 
  76          void jiao_du();
  77          //延时调用AD转换 ///////////////////////////////////////////////////液晶显示驱动程序
  78          void delay(unsigned int z)
  79            //延时1ms
  80            {
  81   1           unsigned int x,y;
  82   1         for(x = 110 ; x > 0 ; x--)
  83   1           for(y=z;y>0;y--);
  84   1         }
  85             void write_com(uchar com)
  86             {
  87   1           lcdrs=0;
  88   1         lcdrw=0;
  89   1            P2=com;
  90   1          delay(1);
  91   1          lcde=1;
  92   1          delay(1);
  93   1          lcde=0;
  94   1         }
  95             void write_dat(uchar dat)//写数据
  96             {
  97   1         lcdrs=1;
  98   1         lcdrw=0;
  99   1         P2=dat;
 100   1         delay(1);
 101   1         lcde=1;
 102   1         delay(1);
 103   1         lcde=0;
 104   1         }
 105             void init()
 106             {
 107   1            lcde=0;
 108   1          write_com(0x38);
 109   1          write_com(0x0c);
 110   1            write_com(0x06);
 111   1            write_com(0x01);
 112   1            write_com(0x80);
 113   1         }
 114            void display_char(uchar y,uchar x,uchar *p,uchar count)
 115            //显示字符串//
 116          {
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 3   

 117   1        uchar i=0;
 118   1        for(i=0;i<count;i++)
 119   1        {
 120   2        if(y==0)
 121   2        x|=0x80;
 122   2        else
 123   2        x|=0xc0;
 124   2        write_com(x);
 125   2        write_dat(*p);
 126   2        x++;p++;
 127   2        }
 128   1      }
 129             void display_xy_su(uchar y,uchar x,uint dat)
 130           {
 131   1         uint shi,ge;
 132   1         if(y==0) x|=0x80;
 133   1         else x|=0xc0;
 134   1         write_com(x);
 135   1         shi=dat/10;
 136   1         ge=dat%10;
 137   1         write_dat(0x30+shi);
 138   1         write_dat(0x30+ge);
 139   1         write_dat(0xdf);
 140   1       }
 141             void display_xy_recive(uchar y,uchar x,uint dat)
 142           {
 143   1         uint shi,ge;
 144   1         if(y==0) x|=0x80;
 145   1         else x|=0xc0;
 146   1         write_com(x);
 147   1         shi=dat/10;
 148   1         ge=dat%10;
 149   1         write_dat(0x30+shi);
 150   1         write_dat(0x30+ge);
 151   1       }
 152            void display_xy_bai(uchar y,uchar x,uint dat)
 153            {
 154   1          uint bai,shi,ge;
 155   1         if(y==0) x|=0x80;
 156   1         else x|=0xc0;
 157   1         write_com(x);
 158   1         bai=dat/100;
 159   1         shi=dat%100/10;
 160   1         ge=dat%10;
 161   1         write_dat(0x30+bai);
 162   1         write_dat(0x2e);
 163   1         write_dat(0x30+shi);
 164   1         write_dat(0x30+ge);
 165   1      
 166   1        }
 167            //////////////////////////////////////////////////////AD转换为实际角度值
 168           void delay_ad(unsigned int t)
 169            {
 170   1        uint k=0;
 171   1        for(k=0;k<t;k++)
 172   1        {
 173   2        ad_ture=get_adc(0);
 174   2        jiao_du();
 175   2        display_xy_su(0,6,jiao);
 176   2        delay(100);
 177   2        }
 178   1        }
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 4   

 179            uint get_adc(uchar ch)
 180            {
 181   1        uint adc_r;
 182   1        adc_r=GetADCResult(ch)*4+ADC_LOW2;
 183   1        adc_r=adc_r*33/100;
 184   1        delay(1);
 185   1        return(adc_r);
 186   1      
 187   1        }
 188           uchar GetADCResult(uchar ch)
 189          {
 190   1        u16 adc=0;
 191   1        ADC_RES = 0;
 192   1        ADC_RESL = 0;
 193   1          ADC_CONTR = ADC_POWER | ADC_SPEEDLL | ch | ADC_START;
 194   1          _nop_();                        //等待4个NOP
 195   1          _nop_();
 196   1          _nop_();
 197   1          _nop_();
 198   1          while (!(ADC_CONTR & ADC_FLAG));//等待ADC转换完成
 199   1          ADC_CONTR &= ~ADC_FLAG;         //Close ADC
 200   1        adc=ADC_RES;
 201   1        adc=(adc<<2)+ADC_RESL;
 202   1          return adc;                 //返回ADC结果
 203   1      }
 204            void Init_ADC()
 205            {
 206   1        //P1=P1M1=P1M0=0xff;
 207   1       P1M0=0x01;
 208   1       P1M1=0x01;
 209   1        ADC_RES=0;
 210   1        ADC_CONTR = ADC_POWER | ADC_SPEEDLL;
 211   1       delay(1) ;
 212   1        }
 213          
 214          
 215             void jiao_du()
 216           {
 217   1       switch(ad_ture)
 218   1       {
 219   2       case 76:
 220   2       case 77:
 221   2       case 78:
 222   2       case 79:
 223   2       case 80:jiao=0;led_green=0;feng=0;break;
 224   2       case 81:jiao=0;led_green=0;feng=0;break; 
 225   2       case 82:jiao=0;break;
 226   2       case 83:
 227   2       case 84:jiao=1;break;
 228   2       case 85:
 229   2       case 86:jiao=1;break;
 230   2       case 87:
 231   2       case 88:jiao=2;break;
 232   2       case 89:
 233   2       case 90:jiao=2;break;
 234   2       case 91:
 235   2       case 92:jiao=3;break;
 236   2       case 93:
 237   2       case 94:jiao=3;break;
 238   2       case 95:
 239   2       case 96:jiao=4;break;
 240   2       case 97:
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 5   

 241   2       case 98:
 242   2       case 99:jiao=5;break;
 243   2       case 100:
 244   2       case 101:jiao=5;break;
 245   2       case 102:
 246   2       case 103:jiao=6;break;
 247   2       case 104:
 248   2       case 105:
 249   2       case 106:jiao=7;break;
 250   2       case 107:
 251   2       case 108:
 252   2       case 109:jiao=8;break;
 253   2       case 110:
 254   2       case 111:jiao=8;break;
 255   2       case 112:
 256   2       case 113:jiao=9;break;
 257   2       case 114:
 258   2       case 115:
 259   2       case 116:jiao=10;break;
 260   2       case 117:
 261   2       case 118:jiao=10;break;
 262   2       case 119:
 263   2       case 120:
 264   2       case 121:jiao=11;break;
 265   2       case 122:
 266   2       case 123:
 267   2       case 124:jiao=12;break;
 268   2       case 125:
 269   2       case 126:
 270   2       case 127:jiao=12;break;
 271   2       case 128:
 272   2       case 129:
 273   2       case 130:jiao=13;break;
 274   2       case 131:
 275   2       case 132:
 276   2       case 133:jiao=13;break;
 277   2       case 134:
 278   2       case 135:
 279   2       case 136:jiao=14;break;
 280   2       case 137:
 281   2       case 138:
 282   2       case 139:jiao=14;break;
 283   2       case 140:
 284   2       case 141:jiao=15;break;
 285   2       case 142:
 286   2       case 143:
 287   2       case 144:
 288   2       case 145:jiao=16;break;
 289   2       case 146:
 290   2       case 147:
 291   2       case 148:jiao=17;break;
 292   2       case 149:
 293   2       case 150:
 294   2       case 151:jiao=18;break;
 295   2       case 152:
 296   2       case 153:
 297   2       case 154:jiao=19;break;
 298   2       case 155:
 299   2       case 156:
 300   2       case 157:jiao=20;break;
 301   2       case 158:
 302   2       case 159:
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 6   

 303   2       case 160:
 304   2       case 161:jiao=21;break;
 305   2       case 162:
 306   2       case 163:
 307   2       case 164:jiao=21;break;
 308   2       case 165:
 309   2       case 166:
 310   2       case 167:jiao=22;break;
 311   2       case 168:
 312   2       case 169:jiao=22;break;
 313   2       case 170:
 314   2       case 171:
 315   2       case 172:jiao=23;break;
 316   2       case 173:
 317   2       case 174:
 318   2       case 175:jiao=24;break;
 319   2       case 176:
 320   2       case 177:
 321   2       case 178:jiao=24;break;
 322   2       case 179:
 323   2       case 180:
 324   2       case 181:jiao=25;break;
 325   2       case 182:
 326   2       case 183:
 327   2       case 184:
 328   2       case 185:jiao=26;break;
 329   2       case 186:
 330   2       case 187:
 331   2       case 188:
 332   2       case 189:jiao=27;break;
 333   2       case 190:
 334   2       case 191:
 335   2       case 192:
 336   2       case 193:jiao=27;break;
 337   2       case 194:
 338   2       case 195:
 339   2       case 196:
 340   2       case 197:jiao=28;break;
 341   2       case 198:
 342   2       case 199:
 343   2       case 200:
 344   2       case 201:jiao=29;break;
 345   2       case 202:
 346   2       case 203:
 347   2       case 204:jiao=30;break;
 348   2       case 205:
 349   2       case 206:
 350   2       case 207:jiao=31;break;
 351   2       case 208:
 352   2       case 209:
 353   2       case 210:jiao=31;break;
 354   2       case 211:
 355   2       case 212:
 356   2       case 213:
 357   2       case 214:jiao=32;break;
 358   2       case 215:
 359   2       case 216:
 360   2       case 217:jiao=32;break;
 361   2       case 218:
 362   2       case 219:
 363   2       case 220:
 364   2       case 221:jiao=33;break;
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 7   

 365   2       case 222:
 366   2       case 223:
 367   2       case 224:
 368   2       case 225:jiao=34;break;
 369   2       case 226:
 370   2       case 227:
 371   2       case 228:jiao=35;break;
 372   2       case 229:
 373   2       case 230:
 374   2       case 231:
 375   2       case 232:jiao=36;break;
 376   2       case 233:
 377   2       case 234:
 378   2       case 235:
 379   2       case 236:
 380   2       case 237:jiao=37;break;
 381   2       case 238:
 382   2       case 239:jiao=37;break;
 383   2       case 240:
 384   2       case 241:
 385   2       case 242:
 386   2       case 243:jiao=38;break;
 387   2       case 244:
 388   2       case 245:
 389   2       case 246:jiao=38;break;
 390   2       case 247:
 391   2       case 248:
 392   2       case 249:
 393   2       case 250:jiao=39;break;
 394   2       case 251:
 395   2       case 252:
 396   2       case 253:
 397   2       case 254:jiao=39;break;
 398   2       case 255:
 399   2       case 256:
 400   2       case 257:jiao=40;break;
 401   2       case 258:
 402   2       case 259:jiao=40;break;
 403   2       case 260:
 404   2       case 261:
 405   2       case 262:
 406   2       case 263:jiao=41;led_green=0;feng=0;break;
 407   2       case 264:
 408   2       case 265:
 409   2       case 266:
 410   2       case 267:jiao=42;led_green=0;feng=0;break;
 411   2       case 268:
 412   2       case 269:
 413   2       case 270:
 414   2       case 271:
 415   2       case 272:jiao=43;led_green=0;feng=0;break;
 416   2       case 273:
 417   2       case 274:
 418   2       case 275:
 419   2       case 276:jiao=44;led_green=0;feng=0;break;
 420   2       case 277:
 421   2       case 278:
 422   2       case 279:jiao=45;led_green=0;feng=0;break;
 423   2       case 280:
 424   2       case 281:
 425   2       case 282:
 426   2       case 283:
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 8   

 427   2       case 284:jiao=46;break;
 428   2       case 285:
 429   2       case 286:
 430   2       case 287:
 431   2       case 288:jiao=47;break;
 432   2       case 289:
 433   2       case 290:
 434   2       case 291:
 435   2       case 292:
 436   2       case 293:jiao=48;break;
 437   2       case 294:
 438   2       case 295:
 439   2       case 296:
 440   2       case 297:
 441   2       case 298:jiao=49;break;
 442   2       case 299:
 443   2       case 300:
 444   2       case 301:
 445   2       case 302:
 446   2       case 303:jiao=50;break;
 447   2       case 304:
 448   2       case 305:
 449   2       case 306:
 450   2       case 307:
 451   2       case 308:jiao=51;break;
 452   2       case 309:
 453   2       case 310:
 454   2       case 311:
 455   2       case 312:
 456   2       case 313:jiao=52;break;
 457   2       case 314:
 458   2       case 315:
 459   2       case 316:
 460   2       case 317:
 461   2       case 318:jiao=53;break;
 462   2       case 319:
 463   2       case 320:
 464   2       case 321:
 465   2       case 322:
 466   2       case 323:jiao=54;break;
 467   2       case 324:
 468   2       case 325:
 469   2       case 326:
 470   2       case 327:
 471   2       case 328:jiao=55;break;
 472   2       case 329:
 473   2       case 330:
 474   2       case 331:jiao=56;break;
 475   2       case 332:
 476   2       case 333:
 477   2       case 334:jiao=57;break;
 478   2       case 335:
 479   2       case 336:
 480   2       case 337:jiao=58;break;
 481   2       case 338:
 482   2       case 339:
 483   2       case 340:jiao=59;break;
 484   2       case 341:
 485   2       case 342:jiao=60;break;
 486   2       case 343:
 487   2       case 344:
 488   2       case 345:
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 9   

 489   2       case 346:
 490   2       case 347:jiao=60;break;
 491   2      
 492   2      }
 493   1       }
 494          ////////////////////////////////////////////////////////////给定值
 495            void keyscan()
 496            {
 497   1      
 498   1        
 499   1        col_1=0;col_2=0;col_3=0;col_4=0;//高位置0检测低位（列）有没有按下
 500   1        if((P3&0x0f)!=0x0f)
 501   1        {
 502   2        col_1=0;col_2=1;col_3=1;col_4=1;keyfind(0);
 503   2        col_1=1;col_2=0;col_3=1;col_4=1;keyfind(4);
 504   2        col_1=1;col_2=1;col_3=0;col_4=1;keyfind(8);
 505   2        col_1=1;col_2=1;col_3=1;col_4=0;keyfind(12);
 506   2        col_1=0;col_2=0;col_3=0;col_4=0;flag++;
 507   2        while(((P3&0x0f)!=0x0f));//等待按键弹回跳出这个if语句，按一次flag=1依次递增
 508   2        }
 509   1        }
 510          
 511            
 512            void keyfind(unsigned char col_dat)
 513            {
 514   1        unsigned char temp;
 515   1        temp=(~P3)&0x0f;
 516   1        switch(temp)
 517   1        {
 518   2        case 1:keynum=1+col_dat;break;
 519   2         case 2:keynum=2+col_dat;break;
 520   2          case 4:keynum=3+col_dat;break;
 521   2         case 8:keynum=4+col_dat;break;
 522   2        }
 523   1        }
 524            void keyprocess(void)
 525            {
 526   1        switch(keynum)
 527   1        {
 528   2        case 1:if(flag==1)num1=7;
 529   2        if(flag==2)num2=7;break;
 530   2         case 2:if(flag==1)num1=4;
 531   2        if(flag==2)num2=4;break;
 532   2         case 3:if(flag==1)num1=1;
 533   2        if(flag==2)num2=1;break;
 534   2         case 5:if(flag==1)num1=8;
 535   2        if(flag==2)num2=8;break;
 536   2         case 6:if(flag==1)num1=5;
 537   2        if(flag==2)num2=5;break;
 538   2         case 7:if(flag==1)num1=2;
 539   2        if(flag==2)num2=2;break;
 540   2         case 8:if(flag==1)num1=0;
 541   2        if(flag==2)num2=0;break;
 542   2         case 9:if(flag==1)num1=9;
 543   2        if(flag==2)num2=9;break;
 544   2         case 10:if(flag==1)num1=6;
 545   2        if(flag==2)num2=6;break;
 546   2         case 11:if(flag==1)num1=3;
 547   2        if(flag==2)num2=3;break;
 548   2        case 4:flag1=1;break;//清除键
 549   2        case 12:flag=3;break;//确认键
 550   2        case 13:flag=4;num=1;break;
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 10  

 551   2        case 14:flag=5;num=1;break;
 552   2        case 15:flag=6;num=1;break;
 553   2        case 16:flag=7;num=1;break;
 554   2        }
 555   1      
 556   1        keynum=0;
 557   1        if(flag1==1)//取消键
 558   1        {
 559   2        z_bit1=1;z_bit2=0;z_bit3=0;//pwm_count=10;pwm_count1=10;
 560   2        num1=0;num2=0;num=0;
 561   2        feng=0;led_green=0;num_py=0;
 562   2        flag=0;flag1=0;flag2=0;flag3=0;flag4=0;
 563   2        }
 564   1        
 565   1        
 566   1        if(flag==1||flag3==1)//取消键按下，flag3=1
 567   1        {
 568   2        flag3=1;
 569   2        display_xy_recive(1,4,num);
 570   2        delay(1);
 571   2        }
 572   1        if(flag==2||flag4==1)//输入两位数，flag4=1
 573   1        {
 574   2        flag4=1;
 575   2        display_xy_recive(1,4,num);
 576   2        delay(1);
 577   2        }
 578   1          num=num1*10+num2;////////////////////////给定值
 579   1        if(num>60)py_bit=1;
 580   1        else py_bit=0;
 581   1        if(flag==3) //按下确认键
 582   1        {
 583   2        display_xy_recive(1,4,num);
 584   2        } } 
 585            ///////////////////////////////////////////////////////PID运算
 586            void pid_init()
 587          {
 588   1          pid.set_angle = 0.0;
 589   1          pid.actual_angle = 0.0;
 590   1          pid.error = 0.0;
 591   1          pid.error_next = 0.0;
 592   1          pid.error_last = 0.0;
 593   1        pid.error_add=0.0;
 594   1        pid.umax=60;
 595   1          pid.kp = 0.15;
 596   1          pid.ki = 1.37;
 597   1          pid.kd = 1.97;
 598   1      }
 599          void pid_realise()//实现pid  
 600          {
 601   1        int gex;
 602   1          pid.set_angle = num;//设置目标角度  
 603   1          pid.error = pid.set_angle - jiao;   //设定-实际 
 604   1        if(pid.actual_angle>pid.umax)
 605   1        {
 606   2          if(pid.error>30)
 607   2          {
 608   3            gex=0;  
 609   3          }
 610   2          else
 611   2          {
 612   3            gex=1;
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 11  

 613   3            if(pid.error<0)
 614   3            {
 615   4              pid.error_add+=pid.error;
 616   4            }
 617   3          }
 618   2        } 
 619   1         middle_value = pid.kp*pid.error+gex*pid.ki*pid.error_add+pid.kd*(pid.error-pid.error_next);//增量计算公
             -式  
 620   1          increment_angle += middle_value;
 621   1          pid.error_next = pid.error;
 622   1        
 623   1      }
 624          ////////////////////////////////////////////////PWM输出
 625          void tim0() interrupt 1
 626          { 
 627   1      TR0=0;//赋初值时，关闭定时器
 628   1       
 629   1      TH0=0xff;//(65536-10)/256;//赋初值定时
 630   1       
 631   1      TL0=0xf7;//(65536-10)%256;//0.01ms
 632   1       
 633   1      TR0=1;//打开定时器
 634   1      time++;
 635   1      if(time>=100) //1khz
 636   1      time=0;
 637   1      if(time<=middle_value) 
 638   1      PWM=1; 
 639   1      else PWM=0; 
 640   1      }
 641          //////////////////////////////////////////////////////////////主函数
 642           void main(void)
 643            {
 644   1          
 645   1          uchar t;
 646   1           PWM=0;
 647   1          TMOD=0x01;//定时器0工作方式1
 648   1          TH0=0xff;//(65536-10)/256;//赋初值定时
 649   1          TL0=0xf7;//(65536-10)%256;//0.01ms
 650   1          ET0=1;//开定时器0中断
 651   1          TR0=1;//启动定时器0
 652   1         P0M1=0x00;
 653   1         P0M0=0x10;    //PWM输出
 654   1         P1M0=0xe1;
 655   1         P1M1=0x01; //AD转换
 656   1       
 657   1        init();
 658   1         TMOD=0x21;
 659   1         TH1=0xfd;
 660   1         TL1=0xfd;
 661   1         TR1=1;
 662   1         SM0=0;
 663   1         SM1=1;
 664   1         REN=1;
 665   1         EA=1;
 666   1         ES=1;
 667   1        TH0=0xff;TL0=0Xa3;EA=1;ET0=1;TR0=1;P1=0xff;
 668   1        display_bit=1;pz_bit=0;
 669   1        delay(10000);
 670   1        while(1)
 671   1        {
 672   2        //AD部分//
 673   2        for(t=0;t<5;t++)
C51 COMPILER V9.60.0.0   ZHONGJIBAN                                                        05/11/2022 21:39:46 PAGE 12  

 674   2        {
 675   3        s3[t]=get_adc(0);
 676   3        }
 677   2        ad_ture=(s3[0]+s3[1]+s3[2]+s3[3]+s3[4])/5;
 678   2        //角度//
 679   2        display_char(0,0,"Angle:",6);jiao_du();
 680   2        if(((jiao-num)<5)||((num-jiao)<5)){led_green=1;feng=1;} else {led_green=0;feng=0;}
 681   2       display_xy_su(0,6,jiao);
 682   2        //显示角度值
 683   2         display_char(1,0,"Set:",4);
 684   2        keyscan();
 685   2        keyprocess();
 686   2       display_xy_su(1,4,num);//设定的角度值
 687   2        pid_realise();
 688   2         
 689   2        }
 690   1        }
 691           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4114    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =     97      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      7    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
